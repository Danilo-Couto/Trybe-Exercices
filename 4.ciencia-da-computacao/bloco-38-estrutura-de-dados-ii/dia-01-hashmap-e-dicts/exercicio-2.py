# Uma certa empresa tem uma estrutura hierarquizada onde cada pessoa reporta a uma √∫nica outra pessoa. Cada pessoa tem um score que √© o total de pessoas que est√£o abaixo dela, incluindo subordinados de seus subordinados, al√©m dela pr√≥pria. Isso significa que uma pessoa que n√£o tem nenhuma equipe tem score 1. Uma pessoa com apenas um subordinado e esse subordinado n√£o tem equipe, tem score 2.

# Escreva um m√©todo que calcule o score de uma determinada pessoa.

# üëÄ De olho na dica: para saber o score de uma pessoa, voc√™ precisa saber o score das pessoas da equipe dela, correto? Qual estrat√©gia utiliza a mesma fun√ß√£o dentro dela pr√≥pria?

# Exemplo de subordinados:

# - 1 => 2, 3
# - 2 => 4
# - 3 => sem subordinados
# - 4 => 5, 6
# - 5 => 7
# - 6 => sem subordinados
# - 7 => sem subordinados

# Neste exemplo, o score de cada pessoa √©:
# - 1 => 5 (score 2) + 1 (score 3) + 1 (score dele pr√≥prio) = 7
# - 2 => 4 (score 4) + 1 (score dele pr√≥prio) = 5
# - 3 => 1 (score dele pr√≥prio)
# - 4 => 2 (score 5) + 1 (score 6) + 1 (score dele pr√≥prio) = 4
# - 5 => 1 (score 7) + 1 (score dele pr√≥prio) = 2
# - 6 => 1 (score dele pr√≥prio)
# - 7 => 1 (score dele pr√≥prio)

# ‚ö†Ô∏è Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.

# B√¥nus: √â muito comum em entrevistas que, quando a pessoa resolve o problema dentro do tempo, fa√ßam-se perguntas "follow-up", que dificultam a quest√£o. Os follow-ups abaixo s√£o opcionais.


import pytest

@pytest.fixture
def input_value():
   input = 39
   return input

def test_divisible_by_3(input_value):
   assert input_value % 3 == 0

def test_divisible_by_6(input_value):
   assert input_value % 6 == 0


print(test_divisible_by_3())